#!/usr/bin/env node

var cluster = require('cluster');
var fs = require('fs');
var winston = require('winston');
var path = require('path');
var spawn = require('child_process').spawn;

var binary = {};

////////////
// logger //
////////////

var transports = [];
if(cluster.isMaster){
  transports.push(
    new (winston.transports.Console)({
      colorize: true,
      timestamp: true
    })
  );
}

binary.logger = new (winston.Logger)({
  levels: winston.config.syslog.levels,
  transports: transports
});

binary.log = function(message, severity){
  if(binary.argv.silent !== 'true'){
    if(!severity){ severity = 'info'; }
    binary.logger.log(severity, message);
  }
};

///////////////
// utilities //
///////////////

binary.utils = {
  hardError: function(err){
    binary.log(err, 'error');
    process.exit(1);
  },
  stringifyInputList: function(list){
    var s = '';
    if(!list){ return s; }
    var arr = list.split(',');
    var used = 0;
    for(var i in arr){
      if(used > 0){ s += ', '; }
      if(arr[i].length > 0){
        s += '\'' + arr[i] + '\'';
        used++;
      }
    }
    return s;
  },
  dirExists: function(dir){
    try {
      var stats = fs.lstatSync(dir);
      return (stats.isDirectory() || stats.isSymbolicLink());
    } catch(e){ return false; }
  },
  fileExists: function(file){
    try {
      var stats = fs.lstatSync(file);
      return (stats.isFile() || stats.isSymbolicLink());
    } catch(e){ return false; }
  },
  createDirSafely: function(dir){
    if(binary.utils.dirExists(dir)){
      binary.log(' - directory \'' + path.normalize(dir) + '\' already exists, skipping');
    } else {
      binary.log(' - creating directory \'' + path.normalize(dir) + '\'');
      fs.mkdirSync(dir, '0766');
    }
  },
  createFileSafely: function(file, data){
    if(binary.utils.fileExists(file)){
      binary.log(' - file \'' + path.normalize(file) + '\' already exists, skipping');
    } else {
      binary.log(' - wrote file \'' + path.normalize(file) + '\'');
      fs.writeFileSync(file, data);
    }
  },
  hashLength: function(obj){
    var size = 0, key;
    for(key in obj){
      if(obj.hasOwnProperty(key)){ size++; }
    }
    return size;
  }
};

//////////
// Load //
//////////

binary.paths = {
  projectRoot: null,
  actionheroRoot: null
};

var pwd = path.normalize(process.cwd());
if(process.env.PWD){
  pwd = path.normalize(process.env.PWD);
}

if(process.env.projectRoot){
  binary.paths.projectRoot = process.env.projectRoot;
} else if(process.env.project_root){
  binary.paths.projectRoot = process.env.project_root;
} else if(process.env.PROJECT_ROOT){
  binary.paths.projectRoot = process.env.PROJECT_ROOT;
} else {
  binary.paths.projectRoot = pwd;
}

if(process.env.actionheroRoot){
  binary.paths.actionheroRoot = process.env.actionheroRoot;
} else if(process.env.actionheroRoot){
  binary.paths.actionheroRoot = process.env.actionheroRoot;
} else if(binary.utils.fileExists(pwd + '/actionhero.js')){
  // in the actionhero project itself
  binary.paths.actionheroRoot = pwd;
} else if(binary.utils.fileExists(pwd + '/node_modules/actionhero/actionhero.js')){
  // running from a project's node_modules (bin or actionhero)
  binary.paths.actionheroRoot = pwd + '/node_modules/actionhero';
  process.chdir(binary.paths.projectRoot);
} else {
  // installed globally
  binary.paths.actionheroRoot = path.normalize(__dirname + '/../');
}

binary.paths.config = {
  'action':      binary.paths.projectRoot + '/actions',
  'task':        binary.paths.projectRoot + '/tasks',
  'public':      binary.paths.projectRoot + '/public',
  'pid':         binary.paths.projectRoot + '/pids',
  'log':         binary.paths.projectRoot + '/log',
  'server':      binary.paths.projectRoot + '/servers',
  'initializer': binary.paths.projectRoot + '/initializers'
};

binary.argv = require('optimist').argv;

binary.actions = {};

fs.readdirSync(binary.paths.actionheroRoot + '/bin/methods/').sort().forEach(function(file){
  if(file.indexOf('.js') > 0){
    var action = file.split('.')[0];
    binary.actions[action] = require(binary.paths.actionheroRoot + '/bin/methods/' + file)[action];
  }
});

binary.mainAction = binary.argv._[0];
if(!binary.mainAction){ binary.mainAction = 'start'; }

binary.isDaemon = (binary.argv.isDaemon === 'true');

if(binary.actions[binary.mainAction]){
  if(binary.argv.daemon){
    var args = process.argv.splice(2);
    for(var i in args){
      if(args[i].indexOf('--daemon') >= 0){
        args.splice(i, 1);
        break;
      }
    }
    args.push('--isDaemon=true');
    var command = path.normalize(binary.paths.actionheroRoot + '/bin/actionhero');
    var child = spawn(command, args, {detached: true, cwd: process.cwd(), env: process.env, stdio: 'ignore' });
    // child.unref();
    binary.log(command + ' ' + args.join(' '), 'info');
    binary.log('spawned child process with pid ' + child.pid, 'notice');
    setTimeout(process.exit, 2000); // TODO: why is this sleep needed?
  } else if(binary.argv.isDaemon){
    binary.logger.remove(winston.transports.Console);
    binary.actions[binary.mainAction](binary, function(){});
  } else {
    binary.log('actionhero >> ' + binary.mainAction);
    binary.log('project_root >> ' + path.normalize(binary.paths.projectRoot + '/'), 'debug');
    binary.log('actionheroRoot >> ' + path.normalize(binary.paths.actionheroRoot + '/'), 'debug');
    binary.actions[binary.mainAction](binary, function(){});
  }
} else {
  binary.actions.unknownInput(binary, function(){});
  process.exit(1);
}
