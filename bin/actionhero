#!/usr/bin/env node
'use strict';

var cluster  = require('cluster');
var fs       = require('fs');
var winston  = require('winston');
var path     = require('path');
var optimist = require('optimist');
var spawn    = require('child_process').spawn;

var actionheroRoot = path.normalize(__dirname + '/..');
var projectRoot;

if(process.env.projectRoot){
  projectRoot = process.env.projectRoot;
}else if(process.env.project_root){
  projectRoot = process.env.project_root;
}else if(process.env.PROJECT_ROOT){
  projectRoot = process.env.PROJECT_ROOT;
}else{
  projectRoot = path.normalize(process.cwd());
}

var actionheroPrototype = require(actionheroRoot + '/actionhero.js').actionheroPrototype;
var actionhero = new actionheroPrototype();
var configChanges = {};

var commands = [];
if(!optimist.argv._ || optimist.argv._.length === 0){ commands.push('start'); }
optimist.argv._.forEach(function(arg){ commands.push(arg); });

if(commands.length === 1 && commands[0] === 'generate'){

  // when generating the project from scratch, we cannot rely on the normal initilizers
  var runner = require(__dirname + path.sep + 'methods' + path.sep + commands.join(path.sep) + '.js');
  runner({projectRoot: projectRoot}, function(error){
    if(error){ throw error; }
    setTimeout(process.exit, 500, 0);
  });

}else{

  actionhero.initialize({configChanges: configChanges}, function(error, api){
    if(error){ throw error; }
    api._context = actionhero;

    try{
      var runner = require(__dirname + path.sep + 'methods' + path.sep + commands.join(path.sep) + '.js');

      api.log('--------------------------------------');
      api.log('ACTIONHERO COMMAND >> ' + commands.join(' '));
      api.log('projectRoot: ' + path.normalize(projectRoot), 'debug');
      api.log('actionheroRoot: ' + path.normalize(actionheroRoot), 'debug');
      api.log('--------------------------------------');

      if(optimist.argv.daemon){
        var newArgs = process.argv.splice(2);
        for(var i in newArgs){
          if(newArgs[i].indexOf('--daemon') >= 0){ newArgs.splice(i, 1); }
        }
        newArgs.push('--isDaemon=true');
        var command = path.normalize(actionheroRoot + '/bin/actionhero');
        var child = spawn(command, newArgs, {detached: true, cwd: process.cwd(), env: process.env, stdio: 'ignore'});
        api.log(command + ' ' + newArgs.join(' '), 'debug');
        api.log('spawned child process with pid ' + child.pid, 'notice');
        process.nextTick(process.exit);
      }else{
        runner(api, function(error, toStop){
          if(error){ throw error; }
          if(toStop){ setTimeout(process.exit, 500, 0); }
        });
      }
    }catch(e){
      if(!e.message.match(/Cannot find module/)){
        throw(e);
      }else{
        api.log('Error: `' + commands.join(' ') + '` is not a method I can perform.', 'error');
        api.log('run `actionhero help` to learn more.', 'error');
        setTimeout(process.exit, 500, 1);
      }
    }
  });
}
