#!/usr/bin/env node

var cluster = require('cluster');
var fs = require('fs');
var winston = require('winston');
var path = require('path');
var spawn = require('child_process').spawn

var binary = {};

////////////
// logger //
////////////

// TODO We need to manually make these levels until winston switches the order back
binary.logLevels = {
  emerg: 7,
  alert: 6,
  crit: 5,
  error: 4,
  warning: 3,
  notice: 2,
  info: 1,
  debug: 0
}

var transports = []
if(cluster.isMaster){
  transports.push(
    new (winston.transports.Console)({
      colorize: true,
      timestamp: false
    })
  )
}

binary.logger = new (winston.Logger)({
  levels: binary.logLevels,
  transports: transports
});

binary.log = function(message, severity){
  if(binary.argv['silent'] != 'true'){
    if(severity == null){ severity = 'info' }
    binary.logger.log(severity, message);
  }
}

///////////////
// utilities //
///////////////

binary.utils = {
  hardError: function(err){
    binary.log(err, 'error');
    process.exit(1);
  },
  stringifyInputList: function(list){
    var s = '';
    if(list == null){ return s }
    var arr = list.split(',');
    var used = 0;
    for(var i in arr){
      if(used > 0){ s += ', ' }
      if(arr[i].length > 0){
        s += '\'' + arr[i] + '\'';
        used++;
      }
    }
    return s;
  },
  dir_exists: function(dir){
    try {
      var stats = fs.lstatSync(dir);
      return (stats.isDirectory() || stats.isSymbolicLink());
    } catch(e){ return false }
  },
  file_exists: function(file){
    try {
      var stats = fs.lstatSync(file);
      return (stats.isFile() || stats.isSymbolicLink());
    } catch(e){ return false }
  },
  create_dir_safely: function(dir){
    if(binary.utils.dir_exists(dir)){
      binary.log(' - directory \'' + path.normalize(dir) + '\' already exists, skipping');
    } else {
      binary.log(' - creating directory \'' + path.normalize(dir) + '\'');
      fs.mkdirSync(dir, '0766');
    }
  },
  create_file_safely: function(file, data){
    if(binary.utils.file_exists(file)){
      binary.log(' - file \'' + path.normalize(file) + '\' already exists, skipping');
    } else {
      binary.log(' - wrote file \'' + path.normalize(file) + '\'');
      fs.writeFileSync(file, data);
    }
  },
  hashLength: function(obj){
    var size = 0, key;
    for(key in obj){
      if(obj.hasOwnProperty(key)){ size++ }
    }
    return size;
  }
};

//////////
// Load //
//////////

binary.paths = {
  project_root: null,
  actionhero_root: null
}

if(process.env.project_root != null){
  binary.paths.project_root = process.env.project_root;
} else if(process.env.PROJECT_ROOT != null){
  binary.paths.project_root = process.env.PROJECT_ROOT;
} else {
  binary.paths.project_root = process.cwd();
}

if(process.env.actionhero_root != null){
  binary.paths.actionhero_root = process.env.actionhero_root;
} else if(process.env.ACTIONHERO_ROOT != null){
  binary.paths.actionhero_root = process.env.ACTIONHERO_ROOT;
} else if(binary.utils.file_exists(__dirname + '/../actionhero.js')){
  // in the actionhero project itself
  binary.paths.actionhero_root = __dirname + '/..';
} else if(binary.utils.file_exists(__dirname + '/../node_modules/actionhero/actionhero.js')){
  // running from a project's node_modules (bin or actionhero)
  binary.paths.actionhero_root = __dirname + '/../node_modules/actionhero';
} else {
  // installed globally
  binary.paths.actionhero_root = path.normalize(__dirname + '/..');
}

try {
  binary.paths.config = require(binary.paths.project_root + '/config/config.js').config.general.paths
} catch(e){
  binary.paths.config = {
    'action':      binary.paths.project_root + '/actions',
    'task':        binary.paths.project_root + '/tasks',
    'public':      binary.paths.project_root + '/public',
    'pid':         binary.paths.project_root + '/pids',
    'log':         binary.paths.project_root + '/log',
    'server':      binary.paths.project_root + '/servers',
    'initializer': binary.paths.project_root + '/initializers'
  }
}

binary.argv = require('optimist').argv;

binary.actions = {};

fs.readdirSync(binary.paths.actionhero_root + '/bin/methods/').sort().forEach(function(file){
  if(file.indexOf('.js') > 0){
    var action = file.split('.')[0];
    binary.actions[action] = require(binary.paths.actionhero_root + '/bin/methods/' + file)[action];
  }
});

binary.mainAction = binary.argv['_'][0];
if(binary.mainAction == null){ binary.mainAction = 'start' }

binary.isDaemon = (binary.argv['isDaemon'] == 'true');

if(binary.actions[binary.mainAction] != null){
  if(binary.argv['daemon'] != null){
    var args = process.argv.splice(2);
    for(var i in args){
      if(args[i].indexOf('--daemon') >= 0){
        args.splice(i, 1);
        break;
      }
    }
    args.push('--isDaemon=true')
    var command = path.normalize(binary.paths.actionhero_root + '/bin/actionhero');
    var child = spawn(command, args, {detached: true, cwd: process.cwd(), env: process.env, stdio: 'ignore' });
    // child.unref();
    binary.log(command + ' ' + args.join(' '), 'info');
    binary.log('spawned child process with pid ' + child.pid, 'notice');
    setTimeout(process.exit, 2000); // TODO: why is this sleep needed?
  } else if(binary.argv['isDaemon'] != null){
    binary.logger.remove(winston.transports.Console);
    binary.actions[binary.mainAction](binary, function(){});
  } else {
    binary.log('actionhero >> ' + binary.mainAction);
    // binary.log('project_root >> ' + path.normalize(binary.paths.project_root + '/'));
    // binary.log('actionhero_root >> ' + path.normalize(binary.paths.actionhero_root + '/'));
    binary.actions[binary.mainAction](binary, function(){});
  }
} else {
  binary.actions['unknownInput'](binary, function(){});
  process.exit(1);
}
