#!/usr/bin/env node

var cluster = require('cluster');
var fs = require('fs');
var winston = require('winston');
var path = require('path');
var spawn = require('child_process').spawn

var binary = {};

////////////
// logger //
////////////

// TODO We need to manually make these levels until winston switches the order back
binary.logLevels = { 
  emerg: 7,
  alert: 6,
  crit: 5,
  error: 4,
  warning: 3,
  notice: 2,
  info: 1,
  debug: 0 
}

var transports = []
if(cluster.isMaster){
  transports.push(new (winston.transports.Console)({
      colorize: true, 
      timestamp: true,
  }))
}

binary.logger = new (winston.Logger)({
  levels: binary.logLevels,
  transports: transports
});

binary.log = function(message, severity){
  if(binary.argv['silent'] != 'true'){
    if(severity == null){ severity = "info" }
    binary.logger.log(severity, message);
  }
}

///////////////
// utilities //
///////////////

binary.utils = {
  ardError: function(err){
    binary.log(err, "error");
    process.exit(1);
  },
  stringifyInputList: function(list){
    var s = "";
    if(list == null){ return s; }
    arr = list.split(",");
    var used = 0;
    for(var i in arr){
      if(used > 0){ s+= ", ";}
      if(arr[i].length > 0){
        s += '"' + arr[i] + '"';
        used++;
      }
    }
    return s;
  },
  dir_exists: function(dir){
    try{
      var stats = fs.lstatSync(dir);
      if(stats.isDirectory() || stats.isSymbolicLink()){
        return true;
      }else{
        return false;
      }
    }catch(e){
      return false;
    }
  },
  file_exists: function(file){
    try{
      var stats = fs.lstatSync(file);
      if(stats.isFile() || stats.isSymbolicLink()){
        return true;
      }else{
        return false;
      }
    }catch(e){
      return false;
    }
  },
  create_dir_safely: function(dir){
    if(binary.utils.dir_exists(dir)){
      binary.log(" - directory `"+path.normalize(dir)+"` already exists, skipping");
    }else{
      binary.log(" - creating directory `"+path.normalize(dir)+"`");
      fs.mkdirSync(dir , 0766);
    }
  },
  create_file_safely: function(file, data){
    if(binary.utils.file_exists(file)){
      binary.log(" - file `"+path.normalize(file)+"` already exists, skipping");
    }else{
      binary.log(" - wrote file `"+path.normalize(file)+"`");
      fs.writeFileSync(file, data);
    }
  },
  hashLength: function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
  }
};

//////////
// Load //
//////////

binary.paths = {
  project_root: process.cwd(),
  actionHero_root: null,
}

if(binary.utils.file_exists(__dirname + "/../actionHero.js")){
  // in the actionHero project itself
  binary.paths.actionHero_root = __dirname + "/..";
}else if(binary.utils.file_exists(__dirname + "/../node_modules/actionHero/actionHero.js")){
  // running from a project's node_modules (bin or actionHero)
  binary.paths.actionHero_root = __dirname + "/../node_modules/actionHero";
}else{
  // installed globally
  binary.paths.actionHero_root = path.normalize(__dirname + "/..");
}

binary.argv = require('optimist').argv;

binary.actions = {};

fs.readdirSync(binary.paths.actionHero_root + "/bin/methods/").sort().forEach(function(file){
  if(file.indexOf(".js") > 0){
    var action = file.split(".")[0];
    binary.actions[action] = require(binary.paths.actionHero_root + "/bin/methods/" + file)[action];
  }
});

binary.mainAction = binary.argv["_"][0];
if(binary.mainAction == null){ binary.mainAction = "start"; }

if(binary.argv['isDaemon'] == 'true'){
  binary.isDaemon = true;
}else{
  binary.isDaemon = false;
}

if(binary.actions[binary.mainAction] != null){
  if(binary.argv['daemon'] != null){
    var args = process.argv.splice(2);
    for(var i in args){
      if(args[i].indexOf("--daemon") >= 0){
        args.splice(i,1);
        break;
      }
    }
    args.push('--isDaemon=true')
    var command = path.normalize(binary.paths.actionHero_root + "/bin/actionHero");
    var child = spawn(command, args, {detached: true, stdio: 'ignore' });
    child.unref();
    binary.log(command + " " + args.join(' '), "info");
    binary.log("spawned child process with pid "+ child.pid, "notice");
    setTimeout(process.exit, 2000); // TODO: why is this sleep needed?
  }else if(binary.argv['isDaemon'] != null){
    binary.logger.remove(winston.transports.Console);   
    binary.actions[binary.mainAction](binary, function(){});
  }else{
    binary.log("actionHero >> " + binary.mainAction);
    binary.log("project_root >> " + path.normalize(binary.paths.project_root + "/"));
    binary.log("actionHero_root >> " + path.normalize(binary.paths.actionHero_root + "/"));
    binary.actions[binary.mainAction](binary, function(){});
  }
}else{
  binary.actions['unknownInput'](binary, function(){});
  process.exit(1);
}
